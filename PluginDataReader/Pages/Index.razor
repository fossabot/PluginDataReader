@page "/"
@using System.IO;
@using ExtensibleSaveFormat;
@using Sideloader.AutoResolver;
@using static PluginDataReader.FileProcessor.TokenGuesser;

@inject IJSRuntime JS
@inject ILogger<Index> logger
@inject IStringLocalizer<Index> Loc

<div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
	<header class="masthead mb-auto">
		<Header></Header>
	</header>

	<main role="main" class="inner cover">
		<div class="text-center">
			<p class="lead">
				@if (loading)
				{
					<div class="lds-dual-ring"></div>
					<div>@Loc["Please be patient"]...</div>
				}
				<EditForm Model="this" @bind-hidden="loading">
					<div class="d-flex justify-content-center">
						<label>
							<a class="btn btn-lg btn-outline-secondary text-white" style="font-size: xx-large;cursor:pointer">@Loc["Choose your png file"]</a>
							<InputFile OnChange="@OnSelectedFile" accept="image/png" hidden></InputFile>
						</label>
					</div>
				</EditForm>
			</p>
			@if (pngData.Length > 0)
			{
				<img id="resultImg" src="data:image;base64,@System.Convert.ToBase64String(pngData)" />
				@if (null != dictionary && dictionary.Count > 0)
				{
					@foreach (var kvp in dictionary)
					{
						<div class="card w-100">
							<div class="card-body">
								<h5 class="card-title">@kvp.Key</h5>
								<!--h6 class="card-subtitle mb-2 text-muted">Card subtitle</h6-->
								<p class="card-text">
									@switch (kvp.Key)
									{
										case Sideloader.AutoResolver.UniversalAutoResolver.UARExtID:
											(string, string, int)[]? sideloaders = UniversalAutoResolver.ResolveSideloaderData(dictionary);
											@if (null == sideloaders || sideloaders.Length == 0)
											{
												break;
											}
											<table>
												<thead>
													<tr>
														<th>Slot</th>
														<th>GUID</th>
														<th>Property</th>
													</tr>
												</thead>
												<tbody>
													@foreach (var (GUID, Property, Slot) in sideloaders)
													{
														<tr>
															<td>@Slot</td>
															<td>@GUID</td>
															<td>@Property</td>
														</tr>
													}
												</tbody>
											</table>
											break;
										default:
											break;
									}
								</p>
							</div>
						</div>
					}
				}
				else
				{
					<p>
						<div class="alert alert-secondary" role="alert">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
								<path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
							</svg>
							No Plugin Data!
						</div>
					</p>
				}
			}
		</div>
		<NoticeBox Title=@Loc["Notice"]>
			@switch (System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
			{
				case "zh":
					<div>
						<h4>Q: 你會如何使用我的存檔?</h4>
						<p>
							本工具使用<a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm技術</a>實做，完全在瀏覧器內執行C#計算<br />
							我不會將任何使用者資料傳回伺服器<br />
							我不會取得你的存檔<br />
							此頁面在<a href="https://github.com/jim60105/KK">Github</a>上開源
						</p>
					</div>

					<div>
						<hr />
						<h4>Q: 為何頁面會凍結?</h4>
						<p>
							<a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/hosting-models?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm是直接在UI thread上執行</a><br />
							故長運算中無法更新頁面<br />
							這是技術限制，請耐心等待
						</p>
					</div>
					break;
				default:
					<div>
						<h4>Q: How will you use my data?</h4>
						<p>
							This tool is implemented with <a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor WebAssembly technology</a> and performs C# calculations entirely in the browser.<br />
							I will NOT send any user data back to the server.<br />
							I will NOT get your data.<br />
							This page is open source on <a href="https://github.com/jim60105/KK">Github</a>.
						</p>
					</div>

					<div>
						<hr />
						<h4>Q: Why does the page freeze?</h4>
						<p>
							<a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/hosting-models?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm is executed directly on the UI thread.</a><br />
							Therefore, the page cannot be updated during long calculations.<br />
							This is a technical limitation.
							Please be patient.
						</p>
					</div>
					break;
			}
		</NoticeBox>
	</main>

	<footer class="mastfoot mt-auto text-center">
		<div class="inner">
			v21.11.11.0 <a href="https://jim60105.github.io/KK/LICENSE" target="_blank">Copyright © by 琳(jim60105) Since 2010.</a> Theme: <a href="https://getbootstrap.com/docs/4.5/examples/" target="_blank">Bootstrap 4 Example - Cover</a>
		</div>
	</footer>
</div>

@code {
    private byte[] pngData = { };
    private long inputFileSize = 0;
    private string filename = "";
    private bool loading = false;
    private TimeSpan timeSpend;
    Dictionary<string, PluginData>? dictionary = null;

    private async void OnSelectedFile(InputFileChangeEventArgs e)
    {
		var startTime = DateTime.Now;
		using (MemoryStream inputStream = new MemoryStream())
		{
			loading = true;
			base.StateHasChanged();
			await Task.Yield();

			await e.File.OpenReadStream(524288000).CopyToAsync(inputStream);
			filename = e.File.Name.Replace(".png", "");
			inputFileSize = inputStream.Length;
			logger.LogDebug("Input file length: {size}", inputStream.Length);

			pngData = new byte[0];
			inputStream.Seek(0, SeekOrigin.Begin);
			using (BinaryReader binaryReader = new BinaryReader(inputStream))
			{
				pngData = PngFile.LoadPngBytes(binaryReader);
				switch (TokenGuesser.GuessToken(binaryReader))
				{
					case Token.CoordinateToken:
						dictionary = KoikatsuSunshine.Coordinate(binaryReader);
						break;
					case Token.CharaToken:
						dictionary = KoikatsuSunshine.Chara(binaryReader);
						break;
					case Token.StudioToken:
						dictionary = KoikatsuSunshine.Studio(binaryReader);
						break;
					case null:
					default:
						logger.LogInformation("Cannot detect the file.");
						break;
				}

				if (null != dictionary)
				{
					//foreach (var kvp in dictionary)
					//{
					//	logger.LogInformation($"Found PluginData {kvp.Key}");
					//}
					//UniversalAutoResolver.ResolveSideloaderData(dictionary);
				}
				else
				{
					dictionary = new();
					logger.LogInformation("No Extended Data found");
				}
			}
			logger.LogInformation("Process finish");
			timeSpend = DateTime.Now - startTime;
			loading = false;
			await JS.InvokeVoidAsync("indexJs.noticeBoxtoggleDisplay", false).ConfigureAwait(false);
			base.StateHasChanged();
		}
	}
}

