@page "/"
@using System.IO;
@using ExtensibleSaveFormat;
@using Sideloader.AutoResolver;
@using System.Xml
@using static PluginDataReader.FileProcessor.TokenGuesser;
@using CaptiveReality.IO.Filesystem;

@inject IJSRuntime JS
@inject ILogger<Index> logger
@inject IStringLocalizer<Index> Loc
@inject KoikatuAndKoikatsuSunshineHandler kkHandler

<div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
    <header class="masthead mb-auto">
        <Header></Header>
    </header>

    <main role="main" class="inner cover">
        <div style="text-align:center">
            <p class="lead">
                @if (loading)
                {
                    <div class="lds-dual-ring"></div>
                    <div>@Loc["Please be patient"]...</div>
                }
                <EditForm Model="this" @bind-hidden="loading">
                    <div class="d-flex justify-content-center">
                        <label>
                            <a class="btn btn-lg btn-outline-secondary text-white" style="font-size: xx-large;cursor:pointer">@Loc["Choose your png file"]</a>
                            <InputFile OnChange="@OnSelectedFile" accept="image/png" hidden></InputFile>
                        </label>
                    </div>
                </EditForm>
            </p>
            @if (pngData.Length > 0)
            {
                <img id="resultImg" src="data:image/png;base64,@System.Convert.ToBase64String(pngData)" />
                @if (null != dictionary && dictionary.Count > 0)
                {
                    <div class="card-group">
                        @foreach (var kvp in dictionary)
                        {
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">@kvp.Key</h5>
                                    <p class="card-text">
                                        @switch (kvp.Key)
                                        {
                                            case Sideloader.AutoResolver.UniversalAutoResolver.UARExtID:
                                                <div class="custom-control custom-checkbox m-3">
                                                    <input type="checkbox" class="custom-control-input" @bind-value="showDetails" id="showDetailsChk" checked="@showDetails">
                                                    &nbsp;
                                                    <label class="custom-control-label" for="showDetailsChk">Show details</label>
                                                </div>

                                                (string, string, int)[] sideloaders = UniversalAutoResolver.ResolveSideloaderData(dictionary);
                                                @if (sideloaders.Length == 0)
                                                {
                                                    break;
                                                }

                                                @if (showDetails)
                                                {
                                                    <table>
                                                        <thead>
                                                            <tr>
                                                                <th>Slot</th>
                                                                <th>GUID</th>
                                                                <th>Property</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var (GUID, Property, Slot) in sideloaders)
                                                            {
                                                                <tr>
                                                                    <td>@Slot</td>
                                                                    <td>@GUID</td>
                                                                    <td>@Property</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                }
                                                else
                                                {
                                                    var GUIDs = sideloaders.Select(p =>
                                                    {
                                                        var (GUID, Property, Slot) = p;
                                                        return GUID;
                                                    })
                                                    .Distinct()
                                                    .ToArray();
                                                    <table>
                                                        <thead>
                                                            <tr>
                                                                <th>GUID</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var GUID in GUIDs)
                                                            {
                                                                <tr>
                                                                    <td>@GUID</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                }
                                                break;
                                            default:
                                                <div id=@("divPicContainer"+kvp.Key)  style="width: fit-content; margin: 0px auto;">
                                                    @if (bytesDictionary.TryGetValue(kvp.Key, out var bytesList) && bytesList.Count > 0)
                                                    {
                                                        foreach (var item in bytesList)
                                                        {
                                                            if (item.Length == 0) continue;
                                                            ImageDetection.ImageFormat imageFormat = ImageDetection.GetImageFormat(item);
                                                            if (imageFormat == ImageDetection.ImageFormat.UNKNOWN) continue;

                                                            var mimeType = imageFormat switch
                                                            {
                                                                ImageDetection.ImageFormat.PNG => "image/png",
                                                                ImageDetection.ImageFormat.JPEG => "image/jpeg",
                                                                ImageDetection.ImageFormat.BMP => "image/bmp",
                                                                ImageDetection.ImageFormat.GIF => "image/gif",
                                                                ImageDetection.ImageFormat.TIFF => "image/tiff",
                                                                _ => "image"
                                                            };

                                                            <img src="data:@mimeType;base64,@System.Convert.ToBase64String(item)"
                                     class="img-thumbnail"
                                     style="width: 10vw; max-width:150px" />
                                                        }
                                                    }
                                                </div>
                                                <div id=@("div"+kvp.Key) style="width: fit-content; margin: 0px auto;">
                                                </div>
                                                break;
                                        }
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>
                        <div class="alert alert-secondary" role="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                                <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                            </svg>
                            No Plugin Data!
                        </div>
                    </p>
                }
            }
        </div>
        <NoticeBox Title=@Loc["Notice"]>
            @switch (System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
            {
                case "zh":
                    <div>
                        <h4>Q: 你會如何使用我的存檔?</h4>
                        <p>
                            本工具使用<a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm技術</a>實做，完全在瀏覧器內執行C#計算<br />
                            我不會將任何使用者資料傳回伺服器<br />
                            我不會取得你的存檔<br />
                            此頁面在<a href="https://github.com/jim60105/PluginDataReader" target="_blank">Github</a>上開源，並且以<a href="https://github.com/jim60105/PluginDataReader/deployments" target="_blank">Github Page服務</a>提供
                        </p>
                    </div>

                    <div>
                        <hr />
                        <h4>Q: 為何頁面會凍結?</h4>
                        <p>
                            <a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/hosting-models?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm是直接在UI thread上執行</a><br />
                            故長運算中無法更新頁面<br />
                            這是技術限制，請耐心等待
                        </p>
                    </div>

                    <div>
                        <hr />
                        <h4>Q: 我被提示要安裝</h4>
                        <p>
                            此專案建置為「漸進式網絡應用程式(PWA)」，能夠被安裝至系統中離線使用<br>
                            請參考 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E5%BC%8F%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" target="_blank">Wiki</a> 和 <a href="https://developer.mozilla.org/zh-TW/docs/Web/Progressive_web_apps" target="_blank">MDN</a> 以獲得更多資訊<br>
                            簡而言之，此工具能同時以網頁或安裝為桌面應用的型式使用<br>
                            如果你沒有看到相關提示，請以Chromium based瀏覧器開啟本頁面
                        </p>
                    </div>
                    break;
                default:
                    <div>
                        <h4>Q: How will you use my data?</h4>
                        <p>
                            This tool is implemented with <a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor WebAssembly technology</a> and performs C# calculations entirely in the browser.<br />
                            I will NOT send any user data back to the server.<br />
                            I will NOT get your data.<br />
                            This page is open source on <a href="https://github.com/jim60105/PluginDataReader" target="_blank">Github</a> and is provided with <a href="https://github.com/jim60105/PluginDataReader/deployments" target="_blank">Github Pages</a> service.
                        </p>
                    </div>

                    <div>
                        <hr />
                        <h4>Q: Why does the page freeze?</h4>
                        <p>
                            <a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/hosting-models?view=aspnetcore-5.0#blazor-webassembly" target="_blank">Blazor wasm is executed directly on the UI thread.</a><br />
                            Therefore, the page cannot be updated during long calculations.<br />
                            This is a technical limitation.
                            Please be patient.
                        </p>
                    </div>

                    <div>
                        <hr />
                        <h4>Q: I was prompted to install</h4>
                        <p>
                            This project is built as a "Progressive Web Application", which can be installed in the system and used offline.<br>
                            Please refer to <a href="https://en.wikipedia.org/wiki/Progressive_web_application" target="_blank">Wiki</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps" target="_blank">MDN</a> for more information.<br>
                            In short, this tool can be used as a Web page or install as an Application at the same time.<br>
                            If you do not see the relevant prompt, please open this page with a Chromium based browser.
                        </p>
                    </div>
                    break;
            }
        </NoticeBox>
    </main>

    <footer class="mastfoot mt-auto text-center">
        <div class="inner">
            v22.07.01.1 <a href="https://github.com/jim60105/PluginDataReader/blob/master/LICENSE.md" target="_blank">Copyright © by 琳(jim60105) Since 2010.</a> Theme: <a href="https://getbootstrap.com/docs/4.5/examples/" target="_blank">Bootstrap 4 Example - Cover</a>
        </div>
    </footer>
</div>

@code {
    private byte[] pngData = { };
    private long inputFileSize = 0;
    private string filename = "";
    private bool loading = false;
    private TimeSpan timeSpend;
    Dictionary<string, PluginData>? dictionary = null;
    private Dictionary<string, List<byte[]>> bytesDictionary = new();
    private bool showDetails = false;

    private async void OnSelectedFile(InputFileChangeEventArgs e)
    {
        var startTime = DateTime.Now;
        using (MemoryStream inputStream = new MemoryStream())
        {
            loading = true;
            dictionary = null;
            pngData = new byte[0];
            base.StateHasChanged();
            await Task.Yield();

            await e.File.OpenReadStream(524288000).CopyToAsync(inputStream);
            filename = e.File.Name.Replace(".png", "");
            inputFileSize = inputStream.Length;
            logger.LogDebug("Input file length: {size}", inputStream.Length);

            inputStream.Seek(0, SeekOrigin.Begin);
            using (BinaryReader binaryReader = new BinaryReader(inputStream))
            {
                pngData = PngFile.LoadPngBytes(binaryReader);
                switch (TokenGuesser.GuessToken(binaryReader))
                {
                    case Token.Coordinate:
                        dictionary = kkHandler.Coordinate(binaryReader);
                        break;
                    case Token.Chara:
                        dictionary = kkHandler.Chara(binaryReader);
                        break;
                    case Token.Studio:
                        dictionary = kkHandler.Studio(binaryReader);
                        break;
                    case null:
                    default:
                        logger.LogInformation("Cannot read the file.");
                        await JS.InvokeVoidAsync("alert", $"{Loc["No data alert"]}").ConfigureAwait(false);
                        break;
                }

                if (null == dictionary)
                {
                    dictionary = new();
                    logger.LogInformation("No Extended Data found");
                }
            }

            base.StateHasChanged();
            await Task.Yield();

            bytesDictionary.Clear();
            foreach (var kvp in dictionary)
            {
                switch (kvp.Key)
                {
                    case Sideloader.AutoResolver.UniversalAutoResolver.UARExtID:
                        break;
                    default:
                        await JS.InvokeVoidAsync("indexJs.parseJson", UnknownDataResolver.ResolveUnknownData(kvp.Value, kvp.Key, out var bytesList), kvp.Key).ConfigureAwait(false);
                        bytesDictionary.Add(kvp.Key, bytesList);
                        break;
                }
            }

            logger.LogInformation("Process finish");
            timeSpend = DateTime.Now - startTime;
            loading = false;
            await JS.InvokeVoidAsync("indexJs.noticeBoxtoggleDisplay", false).ConfigureAwait(false);
            base.StateHasChanged();
        }
    }
}

